value = hyper_default_param(family_react(), 16)[j])
}
list_ui_hyper_16
})
})
return(list(control_family_input = reactive(control_family_input(input))))
}
)
}
# Test ----
ui <- fluidPage(
selectInput(inputId = "family_sel", label = "Family", choices = c("gaussian", "t"), selected = "gaussian"),
uiOutput(outputId = "sel_hyper_family"),
verbatimTextOutput("imprimir"),
actionButton("ok_browser", label = "Ok")
)
server <- function(input, output, session){
output$sel_hyper_family <- renderUI({
sel_hyper_ui(id = "teste", linkLabel = "Seleciona a função de ligação")
})
family_reactive <- reactive({
input$family_sel
})
output$imprimir <- renderPrint({
sel_hyper("teste", TRUE, sel_family = family_reactive())
})
observeEvent(input$ok_browser,{
browser()
})
}
shinyApp(ui, server)
runApp()
runApp()
#Main UI
source("modal/main_UI.R", local = TRUE)
runApp()
#Functions Used
source("functions/file_ext.R")
source("functions/control_fixed_input.R")
source("functions/list_call.R")
source("functions/inla_models_functions.R")
source("functions/check_if_is_different.R")
source("functions/translate.R")
source("functions/check_lm_ok.R")
source("functions/check_glm_ok.R")
#Modules
source("Modules/fixed_effect_priors.R")
source("Modules/sel_hyper.R")
source("Modules/sel_formula.R")
source("Modules/box_modules.R")
#Modules
source("Modules/fixed_effect_priors.R")
source("Modules/sel_hyper.R")
source("Modules/sel_formula.R")
source("Modules/sel_hyper.R")
source("Modules/sel_formula.R")
# source("Modules/sel_formula.R")
source("Modules/box_modules.R")
source("Modules/new_chooser.R")
runApp()
# New Chooser
new_chooser_UI <- function(id, respLabel, familyLabel, selected_left, familyChoices, selected_right = NULL) {
ns <- NS(id)
column(
width = 7, # Tamanho total
column(
width = 5, # Tamanho da coluna da esquerda
column(
width = 12,
selectInput(
inputId = ns("sel_family"),
label = familyLabel,
choices = familyChoices,
selected = "gaussian",
multiple = FALSE,
selectize = FALSE
),
tags$br(),
tags$br()
),
column(
width = 12,
selectInput(
inputId = ns("leftInput"),
label = "",
choices = selected_left[-1],
multiple = TRUE,
selectize = FALSE,
size = 8,
width = '100%'
)
),
column(
width = 6,
actionButton(
inputId = ns("left_sel_all"),
icon = icon("check-square"),
label = "All"
)
),
column(
width = 6,
actionButton(
inputId = ns("left_desel_all"),
icon = icon("square"),
label = "All"
)
)
),
column(
width = 2, # Tamanho da coluna do meio
style = 'height: 200px; padding-top:150px',
actionButton(
inputId = ns("right_arrow"),
label = NULL,
icon = icon("arrow-circle-o-right", "right-arrow fa-2x"),
style = "all:unset; color:black; cursor:pointer; outline:none; font-size: 18px"
),
tags$br(),
actionButton(
inputId = ns("left_arrow"),
label = NULL,
icon = icon("arrow-circle-o-left", "left-arrow fa-2x"),
style = "all:unset; color:black; cursor:pointer; outline:none; font-size: 18px"
)
),
column(
width = 5, # Tamanho da coluna da direita
column(width = 12,
selectInput(
inputId = ns("resp_var"),
label = respLabel,
choices = unique(c(selected_left, selected_right)),
selected = selected_left[1],
multiple = FALSE
),
checkboxInput(
inputId = ns("intercept"),
label = "Intercept",
value = TRUE
)
),
column(
width = 12,
selectInput(
inputId = ns("rightInput"),
label = "",
choices = selected_right,
multiple = TRUE,
selectize = FALSE,
size = 8,
width = '100%'
)
),
column(
width = 6,
actionButton(
inputId = ns("right_sel_all"),
icon = icon("check-square"),
label = "All"
)
),
column(
width = 6,
actionButton(
inputId = ns("right_desel_all"),
icon = icon("square"),
label = "All"
)
)
)
)
}
new_chooser <- function(id, selected_left, selected_right, leftLabel, rightLabel){
moduleServer(
id,
function(input, output, session){
variables <- reactiveValues(
left = NULL,
right = NULL
)
observeEvent(input$resp_var, {
todas_vars <- c(selected_left, selected_right)
variables$right <- variables$right[variables$right != input$resp_var]
variables$left <- todas_vars[!(todas_vars %in% c(input$resp_var, variables$right))]
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = NULL)
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = NULL)
})
observeEvent(input$right_arrow, {
new_variable_right <- input$leftInput
if(is.null(input$leftInput))
return()
variables$left <- variables$left[! variables$left %in% new_variable_right]
variables$right <- c(variables$right, new_variable_right)
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = NULL)
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = new_variable_right)
})
observeEvent(input$left_arrow, {
new_variable_left <- input$rightInput
if(is.null(input$rightInput))
return()
variables$right <- variables$right[! variables$right %in% new_variable_left]
variables$left <- c(variables$left, new_variable_left)
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = NULL)
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = new_variable_left)
})
observeEvent(input$left_sel_all, {
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = variables$left)
})
observeEvent(input$left_desel_all, {
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = NULL)
})
observeEvent(input$right_sel_all, {
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = variables$right)
})
observeEvent(input$right_desel_all, {
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = NULL)
})
return(list(
resp_var = reactive({input$resp_var}),
intercept = reactive({input$intercept}),
cov_var = reactive(variables$right),
family = reactive(input$sel_family),
not_selected = reactive(variables$left)
))
}
)
}
View(list_call)
# New Chooser
new_chooser_UI <- function(id, respLabel, familyLabel, selected_left, familyChoices, selected_right = NULL) {
ns <- NS(id)
column(
width = 7, # Tamanho total
column(
width = 5, # Tamanho da coluna da esquerda
column(
width = 12,
selectInput(
inputId = ns("sel_family"),
label = familyLabel,
choices = familyChoices,
selected = "gaussian",
multiple = FALSE,
selectize = FALSE
),
tags$br(),
tags$br()
),
column(
width = 12,
selectInput(
inputId = ns("leftInput"),
label = "",
choices = selected_left[-1],
multiple = TRUE,
selectize = FALSE,
size = 8,
width = '100%'
)
),
column(
width = 6,
actionButton(
inputId = ns("left_sel_all"),
icon = icon("check-square"),
label = "All"
)
),
column(
width = 6,
actionButton(
inputId = ns("left_desel_all"),
icon = icon("square"),
label = "All"
)
)
),
column(
width = 2, # Tamanho da coluna do meio
style = 'height: 200px; padding-top:150px',
actionButton(
inputId = ns("right_arrow"),
label = NULL,
icon = icon("arrow-circle-o-right", "right-arrow fa-2x"),
style = "all:unset; color:black; cursor:pointer; outline:none; font-size: 18px"
),
tags$br(),
actionButton(
inputId = ns("left_arrow"),
label = NULL,
icon = icon("arrow-circle-o-left", "left-arrow fa-2x"),
style = "all:unset; color:black; cursor:pointer; outline:none; font-size: 18px"
)
),
column(
width = 5, # Tamanho da coluna da direita
column(width = 12,
selectInput(
inputId = ns("resp_var"),
label = respLabel,
choices = unique(c(selected_left, selected_right)),
selected = selected_left[1],
multiple = FALSE
),
checkboxInput(
inputId = ns("intercept"),
label = "Intercept",
value = TRUE
)
),
column(
width = 12,
selectInput(
inputId = ns("rightInput"),
label = "",
choices = selected_right,
multiple = TRUE,
selectize = FALSE,
size = 8,
width = '100%'
)
),
column(
width = 6,
actionButton(
inputId = ns("right_sel_all"),
icon = icon("check-square"),
label = "All"
)
),
column(
width = 6,
actionButton(
inputId = ns("right_desel_all"),
icon = icon("square"),
label = "All"
)
)
)
)
}
new_chooser <- function(id, selected_left, selected_right, leftLabel, rightLabel){
moduleServer(
id,
function(input, output, session){
variables <- reactiveValues(
left = NULL,
right = NULL
)
observeEvent(input$resp_var, {
todas_vars <- c(selected_left, selected_right)
variables$right <- variables$right[variables$right != input$resp_var]
variables$left <- todas_vars[!(todas_vars %in% c(input$resp_var, variables$right))]
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = NULL)
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = NULL)
})
observeEvent(input$right_arrow, {
new_variable_right <- input$leftInput
if(is.null(input$leftInput))
return()
variables$left <- variables$left[! variables$left %in% new_variable_right]
variables$right <- c(variables$right, new_variable_right)
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = NULL)
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = new_variable_right)
})
observeEvent(input$left_arrow, {
new_variable_left <- input$rightInput
if(is.null(input$rightInput))
return()
variables$right <- variables$right[! variables$right %in% new_variable_left]
variables$left <- c(variables$left, new_variable_left)
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = NULL)
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = new_variable_left)
})
observeEvent(input$left_sel_all, {
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = variables$left)
})
observeEvent(input$left_desel_all, {
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = NULL)
})
observeEvent(input$right_sel_all, {
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = variables$right)
})
observeEvent(input$right_desel_all, {
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = NULL)
})
return(list(
resp_var = reactive({input$resp_var}),
intercept = reactive({input$intercept}),
cov_var = reactive(variables$right),
family = reactive(input$sel_family),
not_selected = reactive(variables$left)
))
}
)
}
#Test with a Modal ----
ui <- fluidPage(
actionButton("Open_modal", "Open")
)
server <- function(input, output, session){
observeEvent(input$Open_modal,{
showModal(modalDialog(
footer = actionButton("close", "Close"),
new_chooser_UI(id = "Test",
respLabel = "Respostas",
familyLabel = "Familia",
selected_left = c("X1", "X2", "X3"),
familyChoices = c("t", "Gaussian"), selected_right = NULL),
actionButton("browser", "ok")
))
})
testando <- new_chooser(id = "Test",
selected_left = c("X1", "X2", "X3"),
selected_right = NULL,
leftLabel = "Covariaveis",
rightLabel = "Covariaveis selecionadas")
observeEvent(input$browser, {
})
observeEvent(input$close, {
removeModal()
testando <- new_chooser(id = "Test",
selected_left = c("X1", "X2", "X3"),
selected_right = NULL,
leftLabel = "Covariaveis",
rightLabel = "Covariaveis selecionadas")
})
}
shinyApp(ui, server)
shiny::runApp()
runApp()
