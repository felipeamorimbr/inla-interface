browser()
})
observeEvent(input$close, {
removeModal()
new_chooser(id = "Test",
selected_left = c("X1", "X2", "X3"),
selected_right = NULL,
leftLabel = "Covariaveis",
rightLabel = "Covariaveis selecionadas")
})
}
shinyApp(ui, server)
runApp()
runApp()
lm_formula_data$cov_var()
runApp()
lm_formula_data$cov_var()
runApp()
lm_formula_data$cov_var()
runApp()
lm_formula_data$cov_var()
runApp()
runApp()
runApp()
lm_formula_data$cov_var()
runApp()
lm_formula_data$cov_var()
runApp()
lm_formula_data
runApp()
lm_formula_data$cov_var()
lm_formula_data
runApp()
runApp()
runApp()
runApp()
runApp()
lm_formula_data$cov_var()
lm_formula_data$cov_var()
runApp()
runApp()
runApp()
runApp()
lm_formula_data$cov_var()
lm_formula_data$cov_var()
runApp()
runApp()
runApp()
lm_formula_data$cov_var()
lm_formula_data$cov_var()
runApp()
lm_formula_data$cov_var()
lm_formula_data$cov_var()
runApp()
runApp()
lm_formula_data$cov_var()
lm_formula_data$cov_var() <- NULL
lm_formula_data <- NULL
runApp()
runApp()
lm_formula_data <- NULL
runApp()
lm_formula_data$cov_var()
runApp()
lm_formula_data$cov_var()
runApp()
lm_formula_data$cov_var()
runApp()
runApp()
lm_formula_data
lm_formula_data$cov_var()
lm_formula_data$cov_var()
lm_formula_data$cov_var()
runApp()
lm_formula_data$cov_var()
runApp()
lm_formula_data$cov_var()
lm_formula_data$cov_var()
lm_formula_data
runApp()
rm(lm_formula_data)
rm("lm_formula_data")
rm(lm_formula_data)
lm_formula_data <- NULL
lm_formula_data
lm_formula_data$cov_var()
lm_formula_data$cov_var()
Q
runApp()
lm_formula_data$cov_var()
new_chooser(
id = "lm_formula",
selected_left = data_input()$covariates,
selected_right = NULL,
rightLabel = "Covariates",
leftLabel = "Covariates Selected"
)
lm_formula_data$cov_var()
runApp()
variables$right
variables$left
variables$right
runApp()
runApp()
runApp()
runApp()
lm_formula_data
lm_formula_data
lm_formula_data$cov_var()
runApp()
lm_formula_data
lm_formula_data$cov_var()
runApp()
runApp()
lm_formula_data
lm_formula_data$cov_var()
reactive(variables$right)
lm_formula_data$cov_var()
lm_formula_data$cov_var
lm_formula_data$cov_var()
reactive(variables$right)()
lm_formula_data$cov_var()
lm_formula_data$cov_var()
#Function that recive the matrix of prioris and the variables names and return the input of control.fixed from INLA
control_fixed_input <- function(prioris, v.names, intercept, covariates){
if((intercept == TRUE && !is.null(covariates))){
control_fixed_input_list <- list() #Creating the object to return
if(!is.na(prioris[1,1])) #If existis, putting mean and precion of intercept on the list
control_fixed_input_list[["mean.intercept"]] <- prioris[1,1]
if(!is.na(prioris[1,2]))
control_fixed_input_list[["prec.intercept"]] <- prioris[1,2]
n <- nrow(prioris) #Number of variables + 1 (intercept)
formula.terms <- v.names #Getting the names of variables and excluding the intercept
mean.prioris <- list() #Creating the list for the prioris means
prec.prioris <- list() #Creating the list for the prioris precisions
j <- 1
for(i in 2:n){ #Puting the terms inside the list
if(!is.na(prioris[i,1])){
mean.prioris[[j]] <- prioris[i,1]
names(mean.prioris)[j] <- formula.terms[i]
j <- j+1
}
}
k <- 1
for(l in 2:n){ #Puting the terms inside the list
if(!is.na(prioris[l,2])){
prec.prioris[[k]] <- prioris[l,2]
names(prec.prioris)[k] <- formula.terms[l]
k <- k+1
}
}
if(length(mean.prioris) != 0)
control_fixed_input_list[["mean"]] <- mean.prioris
if(length(prec.prioris) != 0)
control_fixed_input_list[["prec"]] <- prec.prioris
return(control_fixed_input_list)
}else{
if((intercept == FALSE && !is.null(covariates))){
control_fixed_input_list <- list() #Creating the object to return
n <- nrow(prioris) #Number of variables + 1 (intercept)
formula.terms <- v.names #Getting the names of variables and excluding the intercept
mean.prioris <- list() #Creating the list for the prioris means
prec.prioris <- list() #Creating the list for the prioris precisions
j <- 1
for(i in 1:n){ #Puting the terms inside the list
if(!is.na(prioris[i,1])){
mean.prioris[[j]] <- prioris[i,1]
names(mean.prioris)[j] <- formula.terms[i]
j <- j+1
}
}
k <- 1
for(l in 1:n){ #Puting the terms inside the list
if(!is.na(prioris[l,2])){
prec.prioris[[k]] <- prioris[l,2]
names(prec.prioris)[k] <- formula.terms[l]
k <- k+1
}
}
if(length(mean.prioris) != 0)
control_fixed_input_list[["mean"]] <- mean.prioris
if(length(prec.prioris) != 0)
control_fixed_input_list[["prec"]] <- prec.prioris
return(control_fixed_input_list)
}else{
control_fixed_input_list <- list() #Creating the object to return
if(!is.na(prioris[1,1])) #If existis, putting mean and precion of intercept on the list
control_fixed_input_list[["mean.intercept"]] <- prioris[1,1]
if(!is.na(prioris[1,2]))
control_fixed_input_list[["prec.intercept"]] <- prioris[1,2]
return(control_fixed_input_list)
}
}
}
inla.set.control.fixed.default()
control_fixed_input(c(0,0), v.names = NULL, intercept = TRUE, covariates = c("X1", "X2"))
control_fixed_input(c(0,0), v.names = "", intercept = TRUE, covariates = ""
)
control_fixed_input(c(0,0), v.names = "", intercept = TRUE, covariates = "")
control_fixed_input(c(0,0), v.names = "", intercept = TRUE, covariates = NULL)
control_fixed_input(c(0,0), v.names = "", intercept = TRUE, covariates = NULL)
control_fixed_input(matrix(c(1,1)), v.names = "", intercept = TRUE, covariates = NULL)
control_fixed_input(matrix(c(1,1), nrow = 1, ncol = 1), v.names = "", intercept = TRUE, covariates = NULL)
control_fixed_input(matrix(c(1,1), nrow = 1, ncol = 1), v.names = "", intercept = TRUE, covariates = NULL)
matrix(c(1,1), nrow = 1, ncol = 1)
matrix(c(1,1), nrow = 1, ncol = 2)
control_fixed_input(matrix(c(1,1), nrow = 1, ncol = 2), v.names = "", intercept = TRUE, covariates = NULL)
control_family_input()
control_family_input(input)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c
runApp()
lm_data()$variables_selected
lm_data()$variables_not_selected
lm_data()$variables_selected
runApp()
runApp()
runApp()
runApp()
runApp()
lm_data()
lm_data()$a
lm_data()
lm_data()$variables_not_selected
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# New Chooser
new_chooser_UI <- function(id, respLabel, familyLabel, selected_left, familyChoices, selected_right = NULL) {
ns <- NS(id)
column(
width = 7, # Tamanho total
column(
width = 5, # Tamanho da coluna da esquerda
column(
width = 12,
selectInput(
inputId = ns("sel_family"),
label = familyLabel,
choices = familyChoices,
selected = "gaussian",
multiple = FALSE,
selectize = FALSE
),
tags$br(),
tags$br()
),
column(
width = 12,
selectInput(
inputId = ns("leftInput"),
label = "",
choices = selected_left[-1],
multiple = TRUE,
selectize = FALSE,
size = 8,
width = '100%'
)
),
column(
width = 6,
actionButton(
inputId = ns("left_sel_all"),
icon = icon("check-square"),
label = "All"
)
),
column(
width = 6,
actionButton(
inputId = ns("left_desel_all"),
icon = icon("square"),
label = "All"
)
)
),
column(
width = 2, # Tamanho da coluna do meio
style = 'height: 200px; padding-top:150px',
actionButton(
inputId = ns("right_arrow"),
label = NULL,
icon = icon("arrow-circle-o-right", "right-arrow fa-2x"),
style = "all:unset; color:black; cursor:pointer; outline:none; font-size: 18px"
),
tags$br(),
actionButton(
inputId = ns("left_arrow"),
label = NULL,
icon = icon("arrow-circle-o-left", "left-arrow fa-2x"),
style = "all:unset; color:black; cursor:pointer; outline:none; font-size: 18px"
)
),
column(
width = 5, # Tamanho da coluna da direita
column(width = 12,
selectInput(
inputId = ns("resp_var"),
label = respLabel,
choices = unique(c(selected_left, selected_right)),
selected = selected_left[1],
multiple = FALSE
),
checkboxInput(
inputId = ns("intercept"),
label = "Intercept",
value = TRUE
)
),
column(
width = 12,
selectInput(
inputId = ns("rightInput"),
label = "",
choices = selected_right,
multiple = TRUE,
selectize = FALSE,
size = 8,
width = '100%'
)
),
column(
width = 6,
actionButton(
inputId = ns("right_sel_all"),
icon = icon("check-square"),
label = "All"
)
),
column(
width = 6,
actionButton(
inputId = ns("right_desel_all"),
icon = icon("square"),
label = "All"
)
)
)
)
}
new_chooser <- function(id, selected_left, selected_right, leftLabel, rightLabel){
moduleServer(
id,
function(input, output, session){
variables <- reactiveValues(
left = NULL,
right = NULL
)
observeEvent(input$resp_var, {
todas_vars <- c(selected_left, selected_right)
variables$right <- variables$right[variables$right != input$resp_var]
variables$left <- todas_vars[!(todas_vars %in% c(input$resp_var, variables$right))]
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = NULL)
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = NULL)
})
observeEvent(input$right_arrow, {
new_variable_right <- input$leftInput
if(is.null(input$leftInput))
return()
variables$left <- variables$left[! variables$left %in% new_variable_right]
variables$right <- c(variables$right, new_variable_right)
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = NULL)
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = new_variable_right)
})
observeEvent(input$left_arrow, {
new_variable_left <- input$rightInput
if(is.null(input$rightInput))
return()
variables$right <- variables$right[! variables$right %in% new_variable_left]
variables$left <- c(variables$left, new_variable_left)
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = NULL)
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = new_variable_left)
})
observeEvent(input$left_sel_all, {
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = variables$left)
})
observeEvent(input$left_desel_all, {
updateSelectInput(session,
inputId = "leftInput",
label = leftLabel,
choices = variables$left,
selected = NULL)
})
observeEvent(input$right_sel_all, {
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = variables$right)
})
observeEvent(input$right_desel_all, {
updateSelectInput(session,
inputId = "rightInput",
label = rightLabel,
choices = variables$right,
selected = NULL)
})
return(list(
resp_var = reactive({input$resp_var}),
intercept = reactive({input$intercept}),
cov_var = reactive(variables$right),
family = reactive(input$sel_family),
not_selected = reactive(variables$left)
))
}
)
}
#Test with a Modal ----
ui <- fluidPage(
actionButton("Open_modal", "Open")
)
server <- function(input, output, session){
observeEvent(input$Open_modal,{
showModal(modalDialog(
footer = actionButton("close", "Close"),
new_chooser_UI(id = "Test",
respLabel = "Respostas",
familyLabel = "Familia",
selected_left = c("X1", "X2", "X3"),
familyChoices = c("t", "Gaussian"), selected_right = NULL),
actionButton("browser", "ok")
))
})
testando <- new_chooser(id = "Test",
selected_left = c("X1", "X2", "X3"),
selected_right = NULL,
leftLabel = "Covariaveis",
rightLabel = "Covariaveis selecionadas")
observeEvent(input$browser, {
browser()
})
observeEvent(input$close, {
removeModal()
new_chooser(id = "Test",
selected_left = c("X1", "X2", "X3"),
selected_right = NULL,
leftLabel = "Covariaveis",
rightLabel = "Covariaveis selecionadas")
})
}
shinyApp(ui, server)
server <- function(input, output, session){
observeEvent(input$Open_modal,{
showModal(modalDialog(
footer = actionButton("close", "Close"),
new_chooser_UI(id = "Test",
respLabel = "Respostas",
familyLabel = "Familia",
selected_left = c("X1", "X2", "X3"),
familyChoices = c("t", "Gaussian"), selected_right = NULL),
actionButton("browser", "ok")
))
})
testando <- new_chooser(id = "Test",
selected_left = c("X1", "X2", "X3"),
selected_right = NULL,
leftLabel = "Covariaveis",
rightLabel = "Covariaveis selecionadas")
observeEvent(input$browser, {
browser()
})
observeEvent(input$close, {
removeModal()
testando <- new_chooser(id = "Test",
selected_left = c("X1", "X2", "X3"),
selected_right = NULL,
leftLabel = "Covariaveis",
rightLabel = "Covariaveis selecionadas")
browser()
})
}
shinyApp(ui, server)
testando$cov_var()
