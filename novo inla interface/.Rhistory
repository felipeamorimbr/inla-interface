shiny::runApp()
runApp()
runApp()
?navbarMenu
runApp()
library(shiny)
library(shinyBS)
library(shinyMenus)
app <- shinyApp(
ui =
fluidPage(
smNavBar("testMenu", "shinyMB", full.width = TRUE, fixed = FALSE,
actionLink("testLink", "Link"),
actionLink("testLink2", "Link #2"),
textInput("n", "Sample Size", value = 1000),
smNavDropdown("Distribution",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
),
smQuickDropdown("qd2Test", parent = "navbar", "Quick Dropdown", c("Action 1", "Action 2", "Action 3"))
),
smDropdown(actionLink("ddTest", "Dropdown"),
smHeader("Action Elements"),
smAction("action1", "Action"),
smAction("action2", "Another Action"),
smDivider(),
smHeader("Checkbox Elements"),
smCheckbox("testCB", "cb1", "First Checkbox"),
smCheckbox("testCB", "cb2", "Second Checkbox"),
smCheckbox("testCB", "cb3", "Third Checkbox", selected = TRUE),
smDivider(),
smHeader("More Checkboxes"),
smCheckbox("testCB2", "cb21", "First Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb22", "Second Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb23", "Third Checkbox"),
smDivider(),
smHeader("Radio Elements"),
smRadio("testRB", "rb1", "First Radio"),
smRadio("testRB", "rb2", "Second Radio", selected = TRUE),
smRadio("testRB", "rb3", "Third Radio", selected = TRUE)
),
smQuickDropdown("qdTest", "Quick Dropdown", c("Action 1", "Action 2", "Action 3")),
plotOutput("testPlot"),
smContextMenu("context1", "testPlot",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
)
),
server =
function(input, output, session) {
observeEvent(input$testCB2, ({print(input$testCB2)}))
observeEvent(input$testRB, ({print(input$testRB)}))
observeEvent(input$qdTest, ({print(input$qdTest)}))
observeEvent(input[["Action 1"]], ({print(input[["Action 1"]])}))
output$testPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
lnorm = rlnorm,
unif = runif
)
plot(dist(input$n))
})
}
)
runApp(app)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyFiles")
library(shinyFiles)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyFilesButton('files', label='File select', title='Please select a file', multiple=T) ,
verbatimTextOutput('rawInputValue'),
verbatimTextOutput('filepaths') ,
downloadButton("downloadFiles", "Download Files")
)
server <- function(input, output) {
roots =  c(wd = 'H:/')
shinyFileChoose(input, 'files',
roots =  roots,
filetypes=c('', 'txt' , 'gz' , 'md5' , 'pdf' , 'fasta' , 'fastq' , 'aln'))
output$rawInputValue <- renderPrint({str(input$files)})
filepathsObject <- renderPrint({parseFilePaths(roots, input$files)})
output$filepaths <- filepathsObject
output$downloadFiles <- downloadHandler(
filename = 'filepathsObject' ,
content = function(file) {
file.copy(filepathsObject, file)
}
)
}
shinyApp(ui = ui , server = server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyFilesButton('files', label='File select', title='Please select a file', multiple=T) ,
verbatimTextOutput('rawInputValue'),
verbatimTextOutput('filepaths') ,
downloadButton("downloadFiles", "Download Files")
)
server <- function(input, output) {
roots =  c(wd = 'C:/')
shinyFileChoose(input, 'files',
roots =  roots,
filetypes=c('', 'txt' , 'gz' , 'md5' , 'pdf' , 'fasta' , 'fastq' , 'aln'))
output$rawInputValue <- renderPrint({str(input$files)})
filepathsObject <- renderPrint({parseFilePaths(roots, input$files)})
output$filepaths <- filepathsObject
output$downloadFiles <- downloadHandler(
filename = 'filepathsObject' ,
content = function(file) {
file.copy(filepathsObject, file)
}
)
}
shinyApp(ui = ui , server = server)
library(shiny)
library(shinyFiles)
ui <- shinyUI(pageWithSidebar(
headerPanel(
'Selections with shinyFiles',
'shinyFiles example'
),
sidebarPanel(
shinyFilesButton('file', 'File select', 'Please select a file', FALSE)
),
mainPanel(
tags$h4('The output of a file selection'),
tableOutput("contents")
)
))
server <- shinyServer(function(input, output, session) {
shinyFileChoose(input, 'file', roots=c(wd='.'), filetypes=c('', 'csv'))
output$contents <- renderTable({
inFile <- parseFilePaths(roots=c(wd='.'), input$file)
if( NROW(inFile)) {
df <- read.csv(as.character(inFile$datapath))
print(head(df))
}
})
})
runApp(list(
ui=ui,
server=server
))
runApp()
runApp()
rhandsontable::rHandsontableOutput()
shiny::runGitHub("rhandsontable", "jrowen",
subdir="inst/examples/rhandsontable_dash")
ui <- fluidPage(
rHandsontableOutput('table'),
textOutput('result'),
actionButton("recalc", "generate new random vals and calculate")
)
server <- function(input,output,session)({
values <- reactiveValues(data=as.data.frame(runif(2)))
observe({
input$recalc
values$data <- as.data.frame(runif(2))
})
observe({
if(!is.null(input$table))
values$data <- hot_to_r(input$table)
})
output$table <- renderRHandsontable({
rhandsontable(values$data)
})
output$result <- renderText({
sum(values$data)
})
})
shinyApp(ui = ui, server = server)
runApp()
