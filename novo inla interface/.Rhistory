switch("", "a" = 111, "b" = 1)
switch("a", "a" = 111, "b" = 1)
switch("b", "a" = 111, "b" = 1)
runApp('novo inla interface')
runApp('novo inla interface')
switch("b", "a" = 111, "b" = 1, "aaaaaaaaaaaa")
switch("c", "a" = 111, "b" = 1, "aaaaaaaaaaaa")
library(shiny)
library(shinyBS)
library(shinyMenus)
app <- shinyApp(
ui =
fluidPage(
smNavBar("testMenu", "shinyMB", full.width = TRUE, fixed = FALSE,
actionLink("testLink", "Link"),
actionLink("testLink2", "Link #2"),
textInput("n", "Sample Size", value = 1000),
smNavDropdown("Distribution",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
),
smQuickDropdown("qd2Test", parent = "navbar", "Quick Dropdown", c("Action 1", "Action 2", "Action 3"))
),
smDropdown(actionLink("ddTest", "Dropdown"),
smHeader("Action Elements"),
smAction("action1", "Action"),
smAction("action2", "Another Action"),
smDivider(),
smHeader("Checkbox Elements"),
smCheckbox("testCB", "cb1", "First Checkbox"),
smCheckbox("testCB", "cb2", "Second Checkbox"),
smCheckbox("testCB", "cb3", "Third Checkbox", selected = TRUE),
smDivider(),
smHeader("More Checkboxes"),
smCheckbox("testCB2", "cb21", "First Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb22", "Second Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb23", "Third Checkbox"),
smDivider(),
smHeader("Radio Elements"),
smRadio("testRB", "rb1", "First Radio"),
smRadio("testRB", "rb2", "Second Radio", selected = TRUE),
smRadio("testRB", "rb3", "Third Radio", selected = TRUE)
),
smQuickDropdown("qdTest", "Quick Dropdown", c("Action 1", "Action 2", "Action 3")),
plotOutput("testPlot"),
smContextMenu("context1", "testPlot",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
)
),
server =
function(input, output, session) {
observeEvent(input$testCB2, ({print(input$testCB2)}))
observeEvent(input$testRB, ({print(input$testRB)}))
observeEvent(input$qdTest, ({print(input$qdTest)}))
observeEvent(input[["Action 1"]], ({print(input[["Action 1"]])}))
output$testPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
lnorm = rlnorm,
unif = runif
)
plot(dist(input$n))
})
}
)
runApp(app)
library(shiny)
library(shinyBS)
library(shinyMenus)
app <- shinyApp(
ui =
fluidPage(
smNavBar("testMenu", "shinyMB", full.width = TRUE, fixed = FALSE,
actionLink("testLink", "Link"),
actionLink("testLink2", "Link #2"),
textInput("n", "Sample Size", value = 1000),
smNavDropdown("Distribution",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
),
smQuickDropdown("qd2Test", parent = "navbar", "Quick Dropdown", c("Action 1", "Action 2", "Action 3"))
),
smDropdown(actionLink("ddTest", "Dropdown"),
smHeader("Action Elements"),
smAction("action1", "Action"),
smAction("action2", "Another Action"),
smDivider(),
smHeader("Checkbox Elements"),
smCheckbox("testCB", "cb1", "First Checkbox"),
smCheckbox("testCB", "cb2", "Second Checkbox"),
smCheckbox("testCB", "cb3", "Third Checkbox", selected = TRUE),
smDivider(),
smHeader("More Checkboxes"),
smCheckbox("testCB2", "cb21", "First Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb22", "Second Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb23", "Third Checkbox"),
smDivider(),
smHeader("Radio Elements"),
smRadio("testRB", "rb1", "First Radio"),
smRadio("testRB", "rb2", "Second Radio", selected = TRUE),
smRadio("testRB", "rb3", "Third Radio", selected = TRUE)
),
smQuickDropdown("qdTest", "Quick Dropdown", c("Action 1", "Action 2", "Action 3")),
plotOutput("testPlot"),
smContextMenu("context1", "testPlot",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
)
),
server =
function(input, output, session) {
observeEvent(input$testCB2, ({print(input$testCB2)}))
observeEvent(input$testRB, ({print(input$testRB)}))
observeEvent(input$qdTest, ({print(input$qdTest)}))
observeEvent(input[["Action 1"]], ({print(input[["Action 1"]])}))
output$testPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
lnorm = rlnorm,
unif = runif
)
plot(dist(input$n))
})
}
)
runApp(app)
library(shiny)
library(shinyBS)
library(shinyMenus)
app <- shinyApp(
ui =
fluidPage(
smNavBar("testMenu", "shinyMB", full.width = TRUE, fixed = FALSE,
actionLink("testLink", "Link"),
actionLink("testLink2", "Link #2"),
textInput("n", "Sample Size", value = 1000),
smNavDropdown("Distribution",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
),
smQuickDropdown("qd2Test", parent = "navbar", "Quick Dropdown", c("Action 1", "Action 2", "Action 3"))
),
smDropdown(actionLink("ddTest", "Dropdown"),
smHeader("Action Elements"),
smAction("action1", "Action"),
smAction("action2", "Another Action"),
smDivider(),
smHeader("Checkbox Elements"),
smCheckbox("testCB", "cb1", "First Checkbox"),
smCheckbox("testCB", "cb2", "Second Checkbox"),
smCheckbox("testCB", "cb3", "Third Checkbox", selected = TRUE),
smDivider(),
smHeader("More Checkboxes"),
smCheckbox("testCB2", "cb21", "First Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb22", "Second Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb23", "Third Checkbox"),
smDivider(),
smHeader("Radio Elements"),
smRadio("testRB", "rb1", "First Radio"),
smRadio("testRB", "rb2", "Second Radio", selected = TRUE),
smRadio("testRB", "rb3", "Third Radio", selected = TRUE)
),
smQuickDropdown("qdTest", "Quick Dropdown", c("Action 1", "Action 2", "Action 3")),
plotOutput("testPlot"),
smContextMenu("context1", "testPlot",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
)
),
server =
function(input, output, session) {
observeEvent(input$testCB2, ({print(input$testCB2)}))
observeEvent(input$testRB, ({print(input$testRB)}))
observeEvent(input$qdTest, ({print(input$qdTest)}))
observeEvent(input[["Action 1"]], ({print(input[["Action 1"]])}))
output$testPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
lnorm = rlnorm,
unif = runif
)
plot(dist(input$n))
})
}
)
runApp(app)
library(shiny)
library(shinyBS)
library(shinyMenus)
app <- shinyApp(
ui =
fluidPage(
smNavBar("testMenu", "shinyMB", full.width = TRUE, fixed = FALSE,
actionLink("testLink", "Link"),
actionLink("testLink2", "Link #2"),
textInput("n", "Sample Size", value = 1000),
smNavDropdown("Distribution",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
),
smQuickDropdown("qd2Test", parent = "navbar", "Quick Dropdown", c("Action 1", "Action 2", "Action 3"))
),
smDropdown(actionButton("ddTest", "Dropdown"),
smHeader("Action Elements"),
smAction("action1", "Action"),
smAction("action2", "Another Action"),
smDivider(),
smHeader("Checkbox Elements"),
smCheckbox("testCB", "cb1", "First Checkbox"),
smCheckbox("testCB", "cb2", "Second Checkbox"),
smCheckbox("testCB", "cb3", "Third Checkbox", selected = TRUE),
smDivider(),
smHeader("More Checkboxes"),
smCheckbox("testCB2", "cb21", "First Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb22", "Second Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb23", "Third Checkbox"),
smDivider(),
smHeader("Radio Elements"),
smRadio("testRB", "rb1", "First Radio"),
smRadio("testRB", "rb2", "Second Radio", selected = TRUE),
smRadio("testRB", "rb3", "Third Radio", selected = TRUE)
),
smQuickDropdown("qdTest", "Quick Dropdown", c("Action 1", "Action 2", "Action 3")),
plotOutput("testPlot"),
smContextMenu("context1", "testPlot",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
)
),
server =
function(input, output, session) {
observeEvent(input$testCB2, ({print(input$testCB2)}))
observeEvent(input$testRB, ({print(input$testRB)}))
observeEvent(input$qdTest, ({print(input$qdTest)}))
observeEvent(input[["Action 1"]], ({print(input[["Action 1"]])}))
output$testPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
lnorm = rlnorm,
unif = runif
)
plot(dist(input$n))
})
}
)
runApp(app)
runApp('novo inla interface')
actionLink()
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("test", label = "test"),
shinyjs::hidden(wellPanel(id = "panelA", "I AM PANEL A")),
wellPanel(id="panelB", "I AM PANEL B")
)
sever <- function(input,output){
observeEvent(input$test, {
shinyjs::showElement(id= "panelA")
shinyjs::hideElement(id= "panelB")
})
}
shinyApp(ui=ui,server=server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("test", label = "test"),
shinyjs::hidden(wellPanel(id = "panelA", "I AM PANEL A")),
wellPanel(id="panelB", "I AM PANEL B")
)
sever <- function(input,output){
observeEvent(input$test, {
shinyjs::showElement(id= "panelA")
shinyjs::hideElement(id= "panelB")
})
}
shinyApp(ui=ui,server=sever)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("showA", label = "Show A"),
actionButton("showB", label = "Show B"),
shinyjs::hidden(wellPanel(id = "panelA", "I AM PANEL A")),
wellPanel(id="panelB", "I AM PANEL B")
)
server <- function(input,output){
observeEvent(input$showA, {
shinyjs::showElement(id= "panelA")
shinyjs::hideElement(id= "panelB")
})
observeEvent(input$showB, {
shinyjs::showElement(id= "panelB")
shinyjs::hideElement(id= "panelA")
})
}
shinyApp(ui=ui,server=server)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
textInput("text", "Text")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
textInput("text", "Text")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
textInput("text", "Text"),
textInput("text2", "aaaa")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
file_ext("ex-database.csv")
lengh(file_ext("ex-database.csv"))
lenght(file_ext("ex-database.csv"))
length(file_ext("ex-database.csv"))
nrow(file_ext("ex-database.csv"))
ncol(file_ext("ex-database.csv"))
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
shinyjs::hide(textInput("text", "Text")),
textInput("text2", "aaaa")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
library(shiny)
library(shinyjs)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
shinyjs::hide(textInput("text", "Text")),
textInput("text2", "aaaa")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
library(shiny)
library(shinyjs)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
textInput("text", "Text"),
textInput("text2", "aaaa")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
library(shiny)
library(shinyjs)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
textInput("text", "Text"),
textInput("text2", "aaaa")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text",selector = TRUE)
})
}
)
library(shiny)
library(shinyjs)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
textInput("text", "Text"),
textInput("text2", "aaaa")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text",selector = FALSE)
})
}
)
library(shiny)
library(shinyjs)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
textInput("text", "Text"),
textInput("text2", "aaaa")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text",selector = "hide")
})
}
)
library(shiny)
library(shinyjs)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
hide(textInput("text", "Text")),
textInput("text2", "aaaa")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
library(shiny)
library(shinyjs)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
hideElement(textInput("text", "Text")),
textInput("text2", "aaaa")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
runExample()
runExample("basic")
runExample("basic")
library(shinyjs)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionLink("btn", "Click me"),
hidden(textInput("text", "Text")),
textInput("text2", "aaaa")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
runApp('novo inla interface')
